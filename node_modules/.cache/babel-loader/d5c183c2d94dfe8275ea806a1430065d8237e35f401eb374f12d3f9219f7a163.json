{"ast":null,"code":"const serverUrl=\"http://127.1.3.170:3000/rolls\";const rollDice=async formula=>{try{const rollData=parseFormula(formula);console.log(\"\\u0421\\u043A\\u0440\\u0438\\u043F\\u0442 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u0432 \\u0444\\u043E\\u0440\\u043C\\u0443\\u043B\\u0443: \".concat(formula));await sendRollDataToServer(rollData);return rollData;}catch(error){console.error(\"Error performing roll: \",error);return null;}};const parseFormula=formula=>{const advMatch=formula.match(/adv\\(([^)]+)\\)/);const disadvMatch=formula.match(/disadv\\(([^)]+)\\)/);if(advMatch){console.log(\"\\u0424\\u043E\\u0440\\u043C\\u0443\\u043B\\u0430 \\u0432\\u0438\\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0430 \\u044F\\u043A \\u043F\\u0435\\u0440\\u0435\\u0432\\u0430\\u0433\\u0430: \".concat(advMatch[1]));validateAdvDisadvFormula(advMatch[1]);return handleAdvDisadvRoll(advMatch[1],\"adv\",formula);}else if(disadvMatch){console.log(\"\\u0424\\u043E\\u0440\\u043C\\u0443\\u043B\\u0430 \\u0432\\u0438\\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0430 \\u044F\\u043A \\u043F\\u0435\\u0440\\u0435\\u0448\\u043A\\u043E\\u0434\\u0430: \".concat(disadvMatch[1]));validateAdvDisadvFormula(disadvMatch[1]);return handleAdvDisadvRoll(disadvMatch[1],\"disadv\",formula);}else{console.log(\"\\u0424\\u043E\\u0440\\u043C\\u0443\\u043B\\u0430 \\u0432\\u0438\\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0430 \\u044F\\u043A \\u0441\\u0442\\u0430\\u043D\\u0434\\u0430\\u0440\\u0442\\u043D\\u0430: \".concat(formula));return handleStandardRoll(formula);}};const handleAdvDisadvRoll=(mainFormula,type,fullFormula)=>{const additionalParts=fullFormula.replace(\"\".concat(type,\"(\").concat(mainFormula,\")\"),\"\").split(\"+\").map(part=>part.trim()).filter(Boolean);const mainRoll=type===\"adv\"?handleAdvantageRoll(mainFormula):handleDisadvantageRoll(mainFormula);const additionalRolls=additionalParts.map(part=>handleStandardRoll(part));const total=additionalRolls.reduce((sum,roll)=>sum+roll.total,mainRoll.total);const rolls=[mainRoll,...additionalRolls].flatMap(roll=>roll.rolls);return{formula:fullFormula,rolls,total,date:new Date().toISOString()};};const validateAdvDisadvFormula=formula=>{const parts=formula.split(\"+\").map(part=>part.trim());const diceParts=parts.filter(part=>part.includes(\"d\"));if(diceParts.length!==1){throw new Error(\"Формула некоректна, використовуйте лише 1 тип кубиків при кидку переваги чи перешкоди\");}};const handleStandardRoll=formula=>{const parts=formula.split(\"+\").map(part=>part.trim());const rolls=[];let total=0;parts.forEach(part=>{if(part.includes(\"d\")){const roll=rollSingleDice(part);rolls.push(...roll.rolls);total+=roll.total;}else{const modifier=parseInt(part,10);total+=modifier;rolls.push({value:modifier,isModifier:true});}});return{formula,rolls,total,date:new Date().toISOString()};};const handleAdvantageRoll=formula=>{const roll1=rollSingleDice(formula);const roll2=rollSingleDice(formula);const total=Math.max(roll1.total,roll2.total);console.log(\"\\u0424\\u0443\\u043D\\u043A\\u0446\\u0456\\u044F \\u043F\\u0435\\u0440\\u0435\\u0432\\u0430\\u0433\\u0438: roll1 = \".concat(roll1.total,\", roll2 = \").concat(roll2.total,\", total = \").concat(total));return{formula:\"adv(\".concat(formula,\")\"),rolls:[...roll1.rolls,...roll2.rolls],total,date:new Date().toISOString()};};const handleDisadvantageRoll=formula=>{const roll1=rollSingleDice(formula);const roll2=rollSingleDice(formula);const total=Math.min(roll1.total,roll2.total);console.log(\"\\u0424\\u0443\\u043D\\u043A\\u0446\\u0456\\u044F \\u043F\\u0435\\u0440\\u0435\\u0448\\u043A\\u043E\\u0434\\u0438: roll1 = \".concat(roll1.total,\", roll2 = \").concat(roll2.total,\", total = \").concat(total));return{formula:\"disadv(\".concat(formula,\")\"),rolls:[...roll1.rolls,...roll2.rolls],total,date:new Date().toISOString()};};const rollSingleDice=formula=>{const[count,sides]=formula.split(\"d\").map(Number);const rolls=Array.from({length:count},()=>getRandomInt(1,sides));const total=rolls.reduce((sum,roll)=>sum+roll,0);return{rolls:rolls.map(value=>({value,dice:\"d\".concat(sides)})),total};};const getRandomInt=(min,max)=>{min=Math.ceil(min);max=Math.floor(max);return Math.floor(Math.random()*(max-min+1))+min;};const sendRollDataToServer=async rollData=>{try{const response=await fetch(serverUrl,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(rollData)});if(!response.ok){throw new Error(\"Failed to send roll data to server\");}}catch(error){console.error(\"Error sending roll data to server: \",error);}};module.exports={rollDice};","map":{"version":3,"names":["serverUrl","rollDice","formula","rollData","parseFormula","console","log","concat","sendRollDataToServer","error","advMatch","match","disadvMatch","validateAdvDisadvFormula","handleAdvDisadvRoll","handleStandardRoll","mainFormula","type","fullFormula","additionalParts","replace","split","map","part","trim","filter","Boolean","mainRoll","handleAdvantageRoll","handleDisadvantageRoll","additionalRolls","total","reduce","sum","roll","rolls","flatMap","date","Date","toISOString","parts","diceParts","includes","length","Error","forEach","rollSingleDice","push","modifier","parseInt","value","isModifier","roll1","roll2","Math","max","min","count","sides","Number","Array","from","getRandomInt","dice","ceil","floor","random","response","fetch","method","headers","body","JSON","stringify","ok","module","exports"],"sources":["/home/mbohach/Документи/personal/tabletop/src/DiceRoller/Roll-script.js"],"sourcesContent":["const serverUrl = \"http://127.1.3.170:3000/rolls\";\n\nconst rollDice = async (formula) => {\n  try {\n    const rollData = parseFormula(formula);\n    console.log(`Скрипт отримав формулу: ${formula}`);\n    await sendRollDataToServer(rollData);\n    return rollData;\n  } catch (error) {\n    console.error(\"Error performing roll: \", error);\n    return null;\n  }\n};\n\nconst parseFormula = (formula) => {\n  const advMatch = formula.match(/adv\\(([^)]+)\\)/);\n  const disadvMatch = formula.match(/disadv\\(([^)]+)\\)/);\n\n  if (advMatch) {\n    console.log(`Формула визначена як перевага: ${advMatch[1]}`);\n    validateAdvDisadvFormula(advMatch[1]);\n    return handleAdvDisadvRoll(advMatch[1], \"adv\", formula);\n  } else if (disadvMatch) {\n    console.log(`Формула визначена як перешкода: ${disadvMatch[1]}`);\n    validateAdvDisadvFormula(disadvMatch[1]);\n    return handleAdvDisadvRoll(disadvMatch[1], \"disadv\", formula);\n  } else {\n    console.log(`Формула визначена як стандартна: ${formula}`);\n    return handleStandardRoll(formula);\n  }\n};\n\nconst handleAdvDisadvRoll = (mainFormula, type, fullFormula) => {\n  const additionalParts = fullFormula.replace(`${type}(${mainFormula})`, \"\").split(\"+\").map(part => part.trim()).filter(Boolean);\n  const mainRoll = type === \"adv\" ? handleAdvantageRoll(mainFormula) : handleDisadvantageRoll(mainFormula);\n  const additionalRolls = additionalParts.map(part => handleStandardRoll(part));\n\n  const total = additionalRolls.reduce((sum, roll) => sum + roll.total, mainRoll.total);\n  const rolls = [mainRoll, ...additionalRolls].flatMap(roll => roll.rolls);\n\n  return {\n    formula: fullFormula,\n    rolls,\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst validateAdvDisadvFormula = (formula) => {\n  const parts = formula.split(\"+\").map(part => part.trim());\n  const diceParts = parts.filter(part => part.includes(\"d\"));\n\n  if (diceParts.length !== 1) {\n    throw new Error(\"Формула некоректна, використовуйте лише 1 тип кубиків при кидку переваги чи перешкоди\");\n  }\n};\n\nconst handleStandardRoll = (formula) => {\n  const parts = formula.split(\"+\").map(part => part.trim());\n  const rolls = [];\n  let total = 0;\n\n  parts.forEach(part => {\n    if (part.includes(\"d\")) {\n      const roll = rollSingleDice(part);\n      rolls.push(...roll.rolls);\n      total += roll.total;\n    } else {\n      const modifier = parseInt(part, 10);\n      total += modifier;\n      rolls.push({ value: modifier, isModifier: true });\n    }\n  });\n\n  return {\n    formula,\n    rolls,\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst handleAdvantageRoll = (formula) => {\n  const roll1 = rollSingleDice(formula);\n  const roll2 = rollSingleDice(formula);\n  const total = Math.max(roll1.total, roll2.total);\n\n  console.log(`Функція переваги: roll1 = ${roll1.total}, roll2 = ${roll2.total}, total = ${total}`);\n\n  return {\n    formula: `adv(${formula})`,\n    rolls: [...roll1.rolls, ...roll2.rolls],\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst handleDisadvantageRoll = (formula) => {\n  const roll1 = rollSingleDice(formula);\n  const roll2 = rollSingleDice(formula);\n  const total = Math.min(roll1.total, roll2.total);\n\n  console.log(`Функція перешкоди: roll1 = ${roll1.total}, roll2 = ${roll2.total}, total = ${total}`);\n\n  return {\n    formula: `disadv(${formula})`,\n    rolls: [...roll1.rolls, ...roll2.rolls],\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst rollSingleDice = (formula) => {\n  const [count, sides] = formula.split(\"d\").map(Number);\n  const rolls = Array.from({ length: count }, () => getRandomInt(1, sides));\n  const total = rolls.reduce((sum, roll) => sum + roll, 0);\n\n  return {\n    rolls: rolls.map(value => ({ value, dice: `d${sides}` })),\n    total,\n  };\n};\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst sendRollDataToServer = async (rollData) => {\n  try {\n    const response = await fetch(serverUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(rollData),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to send roll data to server\");\n    }\n  } catch (error) {\n    console.error(\"Error sending roll data to server: \", error);\n  }\n};\n\nmodule.exports = { rollDice };\n"],"mappings":"AAAA,KAAM,CAAAA,SAAS,CAAG,+BAA+B,CAEjD,KAAM,CAAAC,QAAQ,CAAG,KAAO,CAAAC,OAAO,EAAK,CAClC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAGC,YAAY,CAACF,OAAO,CAAC,CACtCG,OAAO,CAACC,GAAG,gIAAAC,MAAA,CAA4BL,OAAO,CAAE,CAAC,CACjD,KAAM,CAAAM,oBAAoB,CAACL,QAAQ,CAAC,CACpC,MAAO,CAAAA,QAAQ,CACjB,CAAE,MAAOM,KAAK,CAAE,CACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAL,YAAY,CAAIF,OAAO,EAAK,CAChC,KAAM,CAAAQ,QAAQ,CAAGR,OAAO,CAACS,KAAK,CAAC,gBAAgB,CAAC,CAChD,KAAM,CAAAC,WAAW,CAAGV,OAAO,CAACS,KAAK,CAAC,mBAAmB,CAAC,CAEtD,GAAID,QAAQ,CAAE,CACZL,OAAO,CAACC,GAAG,qKAAAC,MAAA,CAAmCG,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAC5DG,wBAAwB,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC,CACrC,MAAO,CAAAI,mBAAmB,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAE,KAAK,CAAER,OAAO,CAAC,CACzD,CAAC,IAAM,IAAIU,WAAW,CAAE,CACtBP,OAAO,CAACC,GAAG,2KAAAC,MAAA,CAAoCK,WAAW,CAAC,CAAC,CAAC,CAAE,CAAC,CAChEC,wBAAwB,CAACD,WAAW,CAAC,CAAC,CAAC,CAAC,CACxC,MAAO,CAAAE,mBAAmB,CAACF,WAAW,CAAC,CAAC,CAAC,CAAE,QAAQ,CAAEV,OAAO,CAAC,CAC/D,CAAC,IAAM,CACLG,OAAO,CAACC,GAAG,iLAAAC,MAAA,CAAqCL,OAAO,CAAE,CAAC,CAC1D,MAAO,CAAAa,kBAAkB,CAACb,OAAO,CAAC,CACpC,CACF,CAAC,CAED,KAAM,CAAAY,mBAAmB,CAAGA,CAACE,WAAW,CAAEC,IAAI,CAAEC,WAAW,GAAK,CAC9D,KAAM,CAAAC,eAAe,CAAGD,WAAW,CAACE,OAAO,IAAAb,MAAA,CAAIU,IAAI,MAAAV,MAAA,CAAIS,WAAW,MAAK,EAAE,CAAC,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAC9H,KAAM,CAAAC,QAAQ,CAAGV,IAAI,GAAK,KAAK,CAAGW,mBAAmB,CAACZ,WAAW,CAAC,CAAGa,sBAAsB,CAACb,WAAW,CAAC,CACxG,KAAM,CAAAc,eAAe,CAAGX,eAAe,CAACG,GAAG,CAACC,IAAI,EAAIR,kBAAkB,CAACQ,IAAI,CAAC,CAAC,CAE7E,KAAM,CAAAQ,KAAK,CAAGD,eAAe,CAACE,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,CAAGC,IAAI,CAACH,KAAK,CAAEJ,QAAQ,CAACI,KAAK,CAAC,CACrF,KAAM,CAAAI,KAAK,CAAG,CAACR,QAAQ,CAAE,GAAGG,eAAe,CAAC,CAACM,OAAO,CAACF,IAAI,EAAIA,IAAI,CAACC,KAAK,CAAC,CAExE,MAAO,CACLjC,OAAO,CAAEgB,WAAW,CACpBiB,KAAK,CACLJ,KAAK,CACLM,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAC/B,CAAC,CACH,CAAC,CAED,KAAM,CAAA1B,wBAAwB,CAAIX,OAAO,EAAK,CAC5C,KAAM,CAAAsC,KAAK,CAAGtC,OAAO,CAACmB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CACzD,KAAM,CAAAiB,SAAS,CAAGD,KAAK,CAACf,MAAM,CAACF,IAAI,EAAIA,IAAI,CAACmB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAE1D,GAAID,SAAS,CAACE,MAAM,GAAK,CAAC,CAAE,CAC1B,KAAM,IAAI,CAAAC,KAAK,CAAC,uFAAuF,CAAC,CAC1G,CACF,CAAC,CAED,KAAM,CAAA7B,kBAAkB,CAAIb,OAAO,EAAK,CACtC,KAAM,CAAAsC,KAAK,CAAGtC,OAAO,CAACmB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CACzD,KAAM,CAAAW,KAAK,CAAG,EAAE,CAChB,GAAI,CAAAJ,KAAK,CAAG,CAAC,CAEbS,KAAK,CAACK,OAAO,CAACtB,IAAI,EAAI,CACpB,GAAIA,IAAI,CAACmB,QAAQ,CAAC,GAAG,CAAC,CAAE,CACtB,KAAM,CAAAR,IAAI,CAAGY,cAAc,CAACvB,IAAI,CAAC,CACjCY,KAAK,CAACY,IAAI,CAAC,GAAGb,IAAI,CAACC,KAAK,CAAC,CACzBJ,KAAK,EAAIG,IAAI,CAACH,KAAK,CACrB,CAAC,IAAM,CACL,KAAM,CAAAiB,QAAQ,CAAGC,QAAQ,CAAC1B,IAAI,CAAE,EAAE,CAAC,CACnCQ,KAAK,EAAIiB,QAAQ,CACjBb,KAAK,CAACY,IAAI,CAAC,CAAEG,KAAK,CAAEF,QAAQ,CAAEG,UAAU,CAAE,IAAK,CAAC,CAAC,CACnD,CACF,CAAC,CAAC,CAEF,MAAO,CACLjD,OAAO,CACPiC,KAAK,CACLJ,KAAK,CACLM,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAC/B,CAAC,CACH,CAAC,CAED,KAAM,CAAAX,mBAAmB,CAAI1B,OAAO,EAAK,CACvC,KAAM,CAAAkD,KAAK,CAAGN,cAAc,CAAC5C,OAAO,CAAC,CACrC,KAAM,CAAAmD,KAAK,CAAGP,cAAc,CAAC5C,OAAO,CAAC,CACrC,KAAM,CAAA6B,KAAK,CAAGuB,IAAI,CAACC,GAAG,CAACH,KAAK,CAACrB,KAAK,CAAEsB,KAAK,CAACtB,KAAK,CAAC,CAEhD1B,OAAO,CAACC,GAAG,yGAAAC,MAAA,CAA8B6C,KAAK,CAACrB,KAAK,eAAAxB,MAAA,CAAa8C,KAAK,CAACtB,KAAK,eAAAxB,MAAA,CAAawB,KAAK,CAAE,CAAC,CAEjG,MAAO,CACL7B,OAAO,QAAAK,MAAA,CAASL,OAAO,KAAG,CAC1BiC,KAAK,CAAE,CAAC,GAAGiB,KAAK,CAACjB,KAAK,CAAE,GAAGkB,KAAK,CAAClB,KAAK,CAAC,CACvCJ,KAAK,CACLM,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAC/B,CAAC,CACH,CAAC,CAED,KAAM,CAAAV,sBAAsB,CAAI3B,OAAO,EAAK,CAC1C,KAAM,CAAAkD,KAAK,CAAGN,cAAc,CAAC5C,OAAO,CAAC,CACrC,KAAM,CAAAmD,KAAK,CAAGP,cAAc,CAAC5C,OAAO,CAAC,CACrC,KAAM,CAAA6B,KAAK,CAAGuB,IAAI,CAACE,GAAG,CAACJ,KAAK,CAACrB,KAAK,CAAEsB,KAAK,CAACtB,KAAK,CAAC,CAEhD1B,OAAO,CAACC,GAAG,+GAAAC,MAAA,CAA+B6C,KAAK,CAACrB,KAAK,eAAAxB,MAAA,CAAa8C,KAAK,CAACtB,KAAK,eAAAxB,MAAA,CAAawB,KAAK,CAAE,CAAC,CAElG,MAAO,CACL7B,OAAO,WAAAK,MAAA,CAAYL,OAAO,KAAG,CAC7BiC,KAAK,CAAE,CAAC,GAAGiB,KAAK,CAACjB,KAAK,CAAE,GAAGkB,KAAK,CAAClB,KAAK,CAAC,CACvCJ,KAAK,CACLM,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAC/B,CAAC,CACH,CAAC,CAED,KAAM,CAAAO,cAAc,CAAI5C,OAAO,EAAK,CAClC,KAAM,CAACuD,KAAK,CAAEC,KAAK,CAAC,CAAGxD,OAAO,CAACmB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACqC,MAAM,CAAC,CACrD,KAAM,CAAAxB,KAAK,CAAGyB,KAAK,CAACC,IAAI,CAAC,CAAElB,MAAM,CAAEc,KAAM,CAAC,CAAE,IAAMK,YAAY,CAAC,CAAC,CAAEJ,KAAK,CAAC,CAAC,CACzE,KAAM,CAAA3B,KAAK,CAAGI,KAAK,CAACH,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,CAAGC,IAAI,CAAE,CAAC,CAAC,CAExD,MAAO,CACLC,KAAK,CAAEA,KAAK,CAACb,GAAG,CAAC4B,KAAK,GAAK,CAAEA,KAAK,CAAEa,IAAI,KAAAxD,MAAA,CAAMmD,KAAK,CAAG,CAAC,CAAC,CAAC,CACzD3B,KACF,CAAC,CACH,CAAC,CAED,KAAM,CAAA+B,YAAY,CAAGA,CAACN,GAAG,CAAED,GAAG,GAAK,CACjCC,GAAG,CAAGF,IAAI,CAACU,IAAI,CAACR,GAAG,CAAC,CACpBD,GAAG,CAAGD,IAAI,CAACW,KAAK,CAACV,GAAG,CAAC,CACrB,MAAO,CAAAD,IAAI,CAACW,KAAK,CAACX,IAAI,CAACY,MAAM,CAAC,CAAC,EAAIX,GAAG,CAAGC,GAAG,CAAG,CAAC,CAAC,CAAC,CAAGA,GAAG,CAC1D,CAAC,CAED,KAAM,CAAAhD,oBAAoB,CAAG,KAAO,CAAAL,QAAQ,EAAK,CAC/C,GAAI,CACF,KAAM,CAAAgE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACpE,SAAS,CAAE,CACtCqE,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACtE,QAAQ,CAC/B,CAAC,CAAC,CAEF,GAAI,CAACgE,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAA9B,KAAK,CAAC,oCAAoC,CAAC,CACvD,CACF,CAAE,MAAOnC,KAAK,CAAE,CACdJ,OAAO,CAACI,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC7D,CACF,CAAC,CAEDkE,MAAM,CAACC,OAAO,CAAG,CAAE3E,QAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}