{"ast":null,"code":"const serverUrl = \"http://127.1.3.170:3000/rolls\";\nconst rollDice = async formula => {\n  try {\n    const rollData = parseFormula(formula);\n    console.log(`Скрипт отримав формулу: ${formula}`);\n    await sendRollDataToServer(rollData);\n    return rollData;\n  } catch (error) {\n    console.error(\"Error performing roll: \", error);\n    return null;\n  }\n};\nconst parseFormula = formula => {\n  const disadvMatch = formula.match(/disadv\\(([^)]+)\\)/);\n  const advMatch = formula.match(/adv\\(([^)]+)\\)/);\n  if (disadvMatch) {\n    console.log(`Формула визначена як перешкода: ${disadvMatch[1]}`);\n    validateAdvDisadvFormula(disadvMatch[1]);\n    return handleAdvDisadvRoll(disadvMatch[1], \"disadv\", formula);\n  } else if (advMatch) {\n    console.log(`Формула визначена як перевага: ${advMatch[1]}`);\n    validateAdvDisadvFormula(advMatch[1]);\n    return handleAdvDisadvRoll(advMatch[1], \"adv\", formula);\n  } else {\n    console.log(`Формула визначена як стандартна: ${formula}`);\n    return handleStandardRoll(formula);\n  }\n};\nconst handleAdvDisadvRoll = (mainFormula, type, fullFormula) => {\n  const additionalParts = fullFormula.replace(`${type}(${mainFormula})`, \"\").split(\"+\").map(part => part.trim()).filter(Boolean);\n  const mainRoll = type === \"adv\" ? handleAdvantageRoll(mainFormula) : handleDisadvantageRoll(mainFormula);\n  const additionalRolls = additionalParts.map(part => handleStandardRoll(part));\n  const total = additionalRolls.reduce((sum, roll) => sum + roll.total, mainRoll.total);\n  const rolls = [mainRoll, ...additionalRolls].flatMap(roll => roll.rolls);\n  return {\n    formula: fullFormula,\n    rolls,\n    total,\n    date: new Date().toISOString()\n  };\n};\nconst validateAdvDisadvFormula = formula => {\n  const parts = formula.split(\"+\").map(part => part.trim());\n  const diceParts = parts.filter(part => part.includes(\"d\"));\n  if (diceParts.length !== 1) {\n    throw new Error(\"Формула некоректна, використовуйте лише 1 тип кубиків при кидку переваги чи перешкоди\");\n  }\n};\nconst handleStandardRoll = formula => {\n  const parts = formula.split(\"+\").map(part => part.trim());\n  const rolls = [];\n  let total = 0;\n  parts.forEach(part => {\n    if (part.includes(\"d\")) {\n      const roll = rollSingleDice(part);\n      rolls.push(...roll.rolls);\n      total += roll.total;\n    } else {\n      const modifier = parseInt(part, 10);\n      total += modifier;\n      rolls.push({\n        value: modifier,\n        isModifier: true\n      });\n    }\n  });\n  return {\n    formula,\n    rolls,\n    total,\n    date: new Date().toISOString()\n  };\n};\nconst handleAdvantageRoll = formula => {\n  const roll1 = rollSingleDice(formula);\n  const roll2 = rollSingleDice(formula);\n  const total = Math.max(roll1.total, roll2.total);\n  console.log(`Функція переваги: roll1 = ${roll1.total}, roll2 = ${roll2.total}, total = ${total}`);\n  return {\n    formula: `adv(${formula})`,\n    rolls: [...roll1.rolls, ...roll2.rolls],\n    total,\n    date: new Date().toISOString()\n  };\n};\nconst handleDisadvantageRoll = formula => {\n  const roll1 = rollSingleDice(formula);\n  const roll2 = rollSingleDice(formula);\n  const total = Math.min(roll1.total, roll2.total);\n  console.log(`Функція перешкоди: roll1 = ${roll1.total}, roll2 = ${roll2.total}, total = ${total}`);\n  return {\n    formula: `disadv(${formula})`,\n    rolls: [...roll1.rolls, ...roll2.rolls],\n    total,\n    date: new Date().toISOString()\n  };\n};\nconst rollSingleDice = formula => {\n  const [count, sides] = formula.split(\"d\").map(Number);\n  const rolls = Array.from({\n    length: count\n  }, () => getRandomInt(1, sides));\n  const total = rolls.reduce((sum, roll) => sum + roll, 0);\n  return {\n    rolls: rolls.map(value => ({\n      value,\n      dice: `d${sides}`\n    })),\n    total\n  };\n};\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst sendRollDataToServer = async rollData => {\n  try {\n    const response = await fetch(serverUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(rollData)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to send roll data to server\");\n    }\n  } catch (error) {\n    console.error(\"Error sending roll data to server: \", error);\n  }\n};\nmodule.exports = {\n  rollDice\n};","map":{"version":3,"names":["serverUrl","rollDice","formula","rollData","parseFormula","console","log","sendRollDataToServer","error","disadvMatch","match","advMatch","validateAdvDisadvFormula","handleAdvDisadvRoll","handleStandardRoll","mainFormula","type","fullFormula","additionalParts","replace","split","map","part","trim","filter","Boolean","mainRoll","handleAdvantageRoll","handleDisadvantageRoll","additionalRolls","total","reduce","sum","roll","rolls","flatMap","date","Date","toISOString","parts","diceParts","includes","length","Error","forEach","rollSingleDice","push","modifier","parseInt","value","isModifier","roll1","roll2","Math","max","min","count","sides","Number","Array","from","getRandomInt","dice","ceil","floor","random","response","fetch","method","headers","body","JSON","stringify","ok","module","exports"],"sources":["/home/mbohach/Документи/personal/tabletop/src/DiceRoller/Roll-script.js"],"sourcesContent":["const serverUrl = \"http://127.1.3.170:3000/rolls\";\n\nconst rollDice = async (formula) => {\n  try {\n    const rollData = parseFormula(formula);\n    console.log(`Скрипт отримав формулу: ${formula}`);\n    await sendRollDataToServer(rollData);\n    return rollData;\n  } catch (error) {\n    console.error(\"Error performing roll: \", error);\n    return null;\n  }\n};\n\nconst parseFormula = (formula) => {\n  const disadvMatch = formula.match(/disadv\\(([^)]+)\\)/);\n  const advMatch = formula.match(/adv\\(([^)]+)\\)/);\n\n  if (disadvMatch) {\n    console.log(`Формула визначена як перешкода: ${disadvMatch[1]}`);\n    validateAdvDisadvFormula(disadvMatch[1]);\n    return handleAdvDisadvRoll(disadvMatch[1], \"disadv\", formula);\n  } else if (advMatch) {\n    console.log(`Формула визначена як перевага: ${advMatch[1]}`);\n    validateAdvDisadvFormula(advMatch[1]);\n    return handleAdvDisadvRoll(advMatch[1], \"adv\", formula);\n  } else {\n    console.log(`Формула визначена як стандартна: ${formula}`);\n    return handleStandardRoll(formula);\n  }\n};\n\nconst handleAdvDisadvRoll = (mainFormula, type, fullFormula) => {\n  const additionalParts = fullFormula.replace(`${type}(${mainFormula})`, \"\").split(\"+\").map(part => part.trim()).filter(Boolean);\n  const mainRoll = type === \"adv\" ? handleAdvantageRoll(mainFormula) : handleDisadvantageRoll(mainFormula);\n  const additionalRolls = additionalParts.map(part => handleStandardRoll(part));\n\n  const total = additionalRolls.reduce((sum, roll) => sum + roll.total, mainRoll.total);\n  const rolls = [mainRoll, ...additionalRolls].flatMap(roll => roll.rolls);\n\n  return {\n    formula: fullFormula,\n    rolls,\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst validateAdvDisadvFormula = (formula) => {\n  const parts = formula.split(\"+\").map(part => part.trim());\n  const diceParts = parts.filter(part => part.includes(\"d\"));\n\n  if (diceParts.length !== 1) {\n    throw new Error(\"Формула некоректна, використовуйте лише 1 тип кубиків при кидку переваги чи перешкоди\");\n  }\n};\n\nconst handleStandardRoll = (formula) => {\n  const parts = formula.split(\"+\").map(part => part.trim());\n  const rolls = [];\n  let total = 0;\n\n  parts.forEach(part => {\n    if (part.includes(\"d\")) {\n      const roll = rollSingleDice(part);\n      rolls.push(...roll.rolls);\n      total += roll.total;\n    } else {\n      const modifier = parseInt(part, 10);\n      total += modifier;\n      rolls.push({ value: modifier, isModifier: true });\n    }\n  });\n\n  return {\n    formula,\n    rolls,\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst handleAdvantageRoll = (formula) => {\n  const roll1 = rollSingleDice(formula);\n  const roll2 = rollSingleDice(formula);\n  const total = Math.max(roll1.total, roll2.total);\n\n  console.log(`Функція переваги: roll1 = ${roll1.total}, roll2 = ${roll2.total}, total = ${total}`);\n\n  return {\n    formula: `adv(${formula})`,\n    rolls: [...roll1.rolls, ...roll2.rolls],\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst handleDisadvantageRoll = (formula) => {\n  const roll1 = rollSingleDice(formula);\n  const roll2 = rollSingleDice(formula);\n  const total = Math.min(roll1.total, roll2.total);\n\n  console.log(`Функція перешкоди: roll1 = ${roll1.total}, roll2 = ${roll2.total}, total = ${total}`);\n\n  return {\n    formula: `disadv(${formula})`,\n    rolls: [...roll1.rolls, ...roll2.rolls],\n    total,\n    date: new Date().toISOString(),\n  };\n};\n\nconst rollSingleDice = (formula) => {\n  const [count, sides] = formula.split(\"d\").map(Number);\n  const rolls = Array.from({ length: count }, () => getRandomInt(1, sides));\n  const total = rolls.reduce((sum, roll) => sum + roll, 0);\n\n  return {\n    rolls: rolls.map(value => ({ value, dice: `d${sides}` })),\n    total,\n  };\n};\n\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst sendRollDataToServer = async (rollData) => {\n  try {\n    const response = await fetch(serverUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(rollData),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to send roll data to server\");\n    }\n  } catch (error) {\n    console.error(\"Error sending roll data to server: \", error);\n  }\n};\n\nmodule.exports = { rollDice };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}